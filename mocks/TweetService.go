// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	twitterclone "twitterclone"

	mock "github.com/stretchr/testify/mock"
)

// TweetService is an autogenerated mock type for the TweetService type
type TweetService struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *TweetService) All(ctx context.Context) ([]twitterclone.Tweet, error) {
	ret := _m.Called(ctx)

	var r0 []twitterclone.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]twitterclone.Tweet, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []twitterclone.Tweet); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]twitterclone.Tweet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, input
func (_m *TweetService) Create(ctx context.Context, input twitterclone.CreateTweetInput) (twitterclone.Tweet, error) {
	ret := _m.Called(ctx, input)

	var r0 twitterclone.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitterclone.CreateTweetInput) (twitterclone.Tweet, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitterclone.CreateTweetInput) twitterclone.Tweet); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(twitterclone.Tweet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitterclone.CreateTweetInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReply provides a mock function with given fields: ctx, input, parentID
func (_m *TweetService) CreateReply(ctx context.Context, input twitterclone.CreateTweetInput, parentID string) (twitterclone.Tweet, error) {
	ret := _m.Called(ctx, input, parentID)

	var r0 twitterclone.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, twitterclone.CreateTweetInput, string) (twitterclone.Tweet, error)); ok {
		return rf(ctx, input, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, twitterclone.CreateTweetInput, string) twitterclone.Tweet); ok {
		r0 = rf(ctx, input, parentID)
	} else {
		r0 = ret.Get(0).(twitterclone.Tweet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, twitterclone.CreateTweetInput, string) error); ok {
		r1 = rf(ctx, input, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TweetService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: ctx, id
func (_m *TweetService) GetById(ctx context.Context, id string) (twitterclone.Tweet, error) {
	ret := _m.Called(ctx, id)

	var r0 twitterclone.Tweet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (twitterclone.Tweet, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) twitterclone.Tweet); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(twitterclone.Tweet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTweetService interface {
	mock.TestingT
	Cleanup(func())
}

// NewTweetService creates a new instance of TweetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTweetService(t mockConstructorTestingTNewTweetService) *TweetService {
	mock := &TweetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
